/**
 * [특별한 이차원 배열 2]
 * 
 * n × n 크기의 이차원 배열 arr이 매개변수로 주어질 때, 
 * arr이 다음을 만족하면 1을 아니라면 0을 return 하는 solution 함수를 작성해 주세요.
 * 
 * 0 ≤ i, j < n인 정수 i, j에 대하여 arr[i][j] = arr[j][i]
 */

const solution = (arr) => {
    let solStatus = 1;

    for(i = 0; i < arr.length; i++) {
        for(j = 0; j < arr[i].length; j++) {
            if(i === j) {
                continue;
            } else {
                if(arr[i][j] !== arr[j][i]) {
                    solStatus = 0;
                    break;
                }
            }
        }
    }

    return solStatus;
}

console.time();
console.log(solution([[5, 192, 33], [192, 72, 95], [33, 95, 999]]));	// 1
console.log(solution([[19, 498, 258, 587], [63, 93, 7, 754], [258, 7, 1000, 723], [587, 754, 723, 81]]));	// 0
console.timeEnd();


// 테스트 1 〉	통과 (0.20ms, 33.4MB)
// 테스트 2 〉	통과 (0.27ms, 33.4MB)
// 테스트 3 〉	통과 (0.17ms, 33.5MB)
// 테스트 4 〉	통과 (0.15ms, 33.5MB)
// 테스트 5 〉	통과 (0.20ms, 33.4MB)
// 테스트 6 〉	통과 (0.25ms, 33.4MB)
// 테스트 7 〉	통과 (0.25ms, 33.3MB)
// 테스트 8 〉	통과 (0.21ms, 33.3MB)
// 테스트 9 〉	통과 (0.29ms, 33.7MB)
// 테스트 10 〉	통과 (0.82ms, 33.5MB)
// 테스트 11 〉	통과 (0.25ms, 33.5MB)
// 테스트 12 〉	통과 (1.39ms, 33.5MB)
// 테스트 13 〉	통과 (0.18ms, 33.7MB)
// 테스트 14 〉	통과 (26.56ms, 36.7MB)
// 테스트 15 〉	통과 (0.18ms, 33.7MB)
// 테스트 16 〉	통과 (0.89ms, 33.6MB)
// 테스트 17 〉	통과 (0.17ms, 33.7MB)
// 테스트 18 〉	통과 (2.44ms, 36.7MB)
// 테스트 19 〉	통과 (0.08ms, 33.4MB)
// 테스트 20 〉	통과 (0.06ms, 33.5MB)
// 테스트 21 〉	통과 (0.05ms, 33.4MB)


// 배열에 every라는 함수가 존재.
const solution2 = (arr) => +arr.every((elem, idx1) => elem.every((_, idx2) => arr[idx1][idx2] === arr[idx2][idx1]));

console.time();
console.log(solution2([[5, 192, 33], [192, 72, 95], [33, 95, 999]]));	// 1
console.log(solution2([[19, 498, 258, 587], [63, 93, 7, 754], [258, 7, 1000, 723], [587, 754, 723, 81]]));	// 0
console.timeEnd();


// 테스트 1 〉	통과 (0.08ms, 33.4MB)
// 테스트 2 〉	통과 (0.14ms, 33.5MB)
// 테스트 3 〉	통과 (0.08ms, 33.5MB)
// 테스트 4 〉	통과 (0.14ms, 33.5MB)
// 테스트 5 〉	통과 (0.05ms, 33.4MB)
// 테스트 6 〉	통과 (0.15ms, 33.4MB)
// 테스트 7 〉	통과 (0.05ms, 33.5MB)
// 테스트 8 〉	통과 (0.32ms, 33.6MB)
// 테스트 9 〉	통과 (0.05ms, 33.8MB)
// 테스트 10 〉	통과 (0.31ms, 33.6MB)
// 테스트 11 〉	통과 (0.05ms, 33.5MB)
// 테스트 12 〉	통과 (0.54ms, 33.8MB)
// 테스트 13 〉	통과 (0.07ms, 33.8MB)
// 테스트 14 〉	통과 (1.63ms, 35.6MB)
// 테스트 15 〉	통과 (0.06ms, 33.7MB)
// 테스트 16 〉	통과 (0.59ms, 33.7MB)
// 테스트 17 〉	통과 (0.05ms, 33.8MB)
// 테스트 18 〉	통과 (1.03ms, 35.6MB)
// 테스트 19 〉	통과 (0.08ms, 33.4MB)
// 테스트 20 〉	통과 (0.07ms, 33.5MB)
// 테스트 21 〉	통과 (0.05ms, 33.4MB)